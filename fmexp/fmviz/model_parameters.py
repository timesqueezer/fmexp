#!/usr/bin/env python

from pprint import pprint

import matplotlib.pyplot as plt
import numpy as np

from fmexp.extensions import db
from fmexp.fmclassify import FMClassifier
from fmexp.models import (
    User,
    DataPoint,
    DataPointDataType,
)

DATA = [
    ['None', 10, 0, 0.9975874547647768],
    ['None', 10, 1, 0.9493365500603136],
    ['None', 10, 2, 0.9734620024125452],
    ['None', 10, 3, 0.9867310012062727],
    ['None', 10, 4, 0.9927623642943305],
    ['None', 50, 0, 0.9939686369119421],
    ['None', 50, 1, 0.9493365500603136],
    ['None', 50, 2, 0.971049457177322],
    ['None', 50, 3, 0.9831121833534379],
    ['None', 50, 4, 0.9903498190591074],
    ['None', 100, 0, 0.9951749095295537],
    ['None', 100, 1, 0.9493365500603136],
    ['None', 100, 2, 0.971049457177322],
    ['None', 100, 3, 0.9831121833534379],
    ['None', 100, 4, 0.9903498190591074],
    ['None', 150, 0, 0.9927623642943305],
    ['None', 150, 1, 0.9493365500603136],
    ['None', 150, 2, 0.9686369119420989],
    ['None', 150, 3, 0.9831121833534379],
    ['None', 150, 4, 0.9903498190591074],
    ['None', 200, 0, 0.9927623642943305],
    ['None', 200, 1, 0.9481302774427021],
    ['None', 200, 2, 0.971049457177322],
    ['None', 200, 3, 0.9831121833534379],
    ['None', 200, 4, 0.9903498190591074],
    ['None', 1000, 0, 0.9939686369119421],
    ['None', 1000, 1, 0.9469240048250904],
    ['None', 1000, 2, 0.9686369119420989],
    ['None', 1000, 3, 0.9831121833534379],
    ['None', 1000, 4, 0.9927623642943305],
    ['log2', 10, 0, 0.9867310012062727],
    ['log2', 10, 1, 0.9553679131483716],
    ['log2', 10, 2, 0.9565741857659831],
    ['log2', 10, 3, 0.9638118214716526],
    ['log2', 10, 4, 0.9734620024125452],
    ['log2', 50, 0, 0.991556091676719],
    ['log2', 50, 1, 0.9553679131483716],
    ['log2', 50, 2, 0.9613992762364294],
    ['log2', 50, 3, 0.9674306393244874],
    ['log2', 50, 4, 0.97708082026538],
    ['log2', 100, 0, 0.9903498190591074],
    ['log2', 100, 1, 0.9553679131483716],
    ['log2', 100, 2, 0.9613992762364294],
    ['log2', 100, 3, 0.9650180940892642],
    ['log2', 100, 4, 0.9782870928829915],
    ['log2', 150, 0, 0.991556091676719],
    ['log2', 150, 1, 0.9553679131483716],
    ['log2', 150, 2, 0.9613992762364294],
    ['log2', 150, 3, 0.9686369119420989],
    ['log2', 150, 4, 0.9782870928829915],
    ['log2', 200, 0, 0.991556091676719],
    ['log2', 200, 1, 0.9553679131483716],
    ['log2', 200, 2, 0.9613992762364294],
    ['log2', 200, 3, 0.9674306393244874],
    ['log2', 200, 4, 0.9782870928829915],
    ['log2', 1000, 0, 0.9903498190591074],
    ['log2', 1000, 1, 0.9589867310012062],
    ['log2', 1000, 2, 0.9613992762364294],
    ['log2', 1000, 3, 0.9662243667068757],
    ['log2', 1000, 4, 0.97708082026538],
    ['sqrt', 10, 0, 0.9939686369119421],
    ['sqrt', 10, 1, 0.9553679131483716],
    ['sqrt', 10, 2, 0.9613992762364294],
    ['sqrt', 10, 3, 0.9734620024125452],
    ['sqrt', 10, 4, 0.9782870928829915],
    ['sqrt', 50, 0, 0.9927623642943305],
    ['sqrt', 50, 1, 0.9553679131483716],
    ['sqrt', 50, 2, 0.9613992762364294],
    ['sqrt', 50, 3, 0.9758745476477684],
    ['sqrt', 50, 4, 0.9831121833534379],
    ['sqrt', 100, 0, 0.9927623642943305],
    ['sqrt', 100, 1, 0.9553679131483716],
    ['sqrt', 100, 2, 0.9613992762364294],
    ['sqrt', 100, 3, 0.9758745476477684],
    ['sqrt', 100, 4, 0.9794933655006032],
    ['sqrt', 150, 0, 0.9927623642943305],
    ['sqrt', 150, 1, 0.9553679131483716],
    ['sqrt', 150, 2, 0.962605548854041],
    ['sqrt', 150, 3, 0.9746682750301568],
    ['sqrt', 150, 4, 0.9794933655006032],
    ['sqrt', 200, 0, 0.9951749095295537],
    ['sqrt', 200, 1, 0.9553679131483716],
    ['sqrt', 200, 2, 0.962605548854041],
    ['sqrt', 200, 3, 0.9758745476477684],
    ['sqrt', 200, 4, 0.9819059107358263],
    ['sqrt', 1000, 0, 0.9927623642943305],
    ['sqrt', 1000, 1, 0.9553679131483716],
    ['sqrt', 1000, 2, 0.9613992762364294],
    ['sqrt', 1000, 3, 0.9746682750301568],
    ['sqrt', 1000, 4, 0.9831121833534379],
]

def model_parameters():
    fig, ax = plt.subplots()

    # labels = [d[1] for d in DATA] # n_estimators
    labels = [10, 50, 100, 150, 200, 1000]
    x = np.arange(len(labels))

    mf_scores = {
        'None': [d[3] for d in DATA if d[0] == 'None'],
        'log2': [d[3] for d in DATA if d[0] == 'log2'],
        'sqrt': [d[3] for d in DATA if d[0] == 'sqrt'],
    }

    width = 1/15

    i = -7
    for mf, scores in mf_scores.items():
        rects = ax.bar(x + (width * i / 15), scores, width, label='Max Features: ' + mf)
        ax.bar_label(rects, padding=3)
        i += 1

        md_scores = {
            'None': [d[3] for d in DATA if d[2] == 0 and d[0] == mf],
            1: [d[3] for d in DATA if d[2] == 1 and d[0] == mf],
            2: [d[3] for d in DATA if d[2] == 2 and d[0] == mf],
            3: [d[3] for d in DATA if d[2] == 3 and d[0] == mf],
            4: [d[3] for d in DATA if d[2] == 4 and d[0] == mf],
        }

        for md, scores in md_scores.items():
            rects = ax.bar(x + (width * i / 15), scores, width, label='Max Depth: ' + md)
            ax.bar_label(rects, padding=3)
            i += 1

    ax.set_ylabel('Score')
    ax.set_xticks(x, labels)
    ax.legend()

    plt.show()
